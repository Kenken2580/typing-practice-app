// problem-engine.js - Mode3Áã¨Á´ã„ÅÆÈ´òÂ∫¶„Å™Êó•Êú¨Ë™ûÂÖ•ÂäõÂ≠¶Áøí„Ç∑„Çπ„ÉÜ„É†
// ÂçäËßí/ÂÖ®Ëßí„ÄÅ„Å≤„Çâ„Åå„Å™„ÄÅ„Ç´„Çø„Ç´„ÉäÂàá„ÇäÊõø„Åà„ÇíÂê´„ÇÄÁ∑èÂêàÁöÑ„Å™Â≠¶Áøí„Ç®„É≥„Ç∏„É≥

(() => {
  'use strict';
  if (window.mode3ProblemEngine) return; // Â§öÈáç„É≠„Éº„ÉâÈò≤Ê≠¢
  window.mode3ProblemEngine = true;

  /* --------------------------------------------------
     1. Â≠¶Áøí„Ç´„É™„Ç≠„É•„É©„É†ÂÆöÁæ©
     --------------------------------------------------*/
  const learningCurriculum = [
    {
      id: 'basic-switch',
      title: 'Âü∫Êú¨Âàá„ÇäÊõø„ÅàÊìç‰Ωú',
      description: 'ÂçäËßí/ÂÖ®Ëßí„Ç≠„Éº„Å®„Åã„Å™„Ç≠„Éº„ÅÆÂü∫Êú¨Êìç‰Ωú„ÇíÂ≠¶„Å≥„Åæ„Åó„Çá„ÅÜ',
      problems: [
        {
          instruction: 'ÂçäËßí/ÂÖ®Ëßí„Ç≠„Éº„ÇíÊäº„Åó„Å¶ÂÖ•Âäõ„É¢„Éº„Éâ„ÇíÂàá„ÇäÊõø„Åà„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['Backquote'],
          displayKeys: ['Âçä/ÂÖ®'],
          inputMode: 'direct'
        },
        {
          instruction: '„Åã„Å™„Ç≠„Éº„ÇíÊäº„Åó„Å¶„Å≤„Çâ„Åå„Å™ÂÖ•Âäõ„É¢„Éº„Éâ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 
          expectedKeys: ['KanaMode'],
          displayKeys: ['„Åã„Å™'],
          inputMode: 'direct'
        },
        {
          instruction: 'ÂÜç„Å≥ÂçäËßí/ÂÖ®Ëßí„Ç≠„Éº„ÅßÂçäËßí„É¢„Éº„Éâ„Å´Êàª„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['Backquote'],
          displayKeys: ['Âçä/ÂÖ®'],
          inputMode: 'direct'
        }
      ]
    },
    {
      id: 'hiragana-basic',
      title: '„Å≤„Çâ„Åå„Å™Âü∫Êú¨ÂÖ•Âäõ',
      description: '„Å≤„Çâ„Åå„Å™„É¢„Éº„Éâ„Åß„ÅÆÂü∫Êú¨ÁöÑ„Å™ÊñáÂ≠óÂÖ•Âäõ',
      problems: [
        {
          instruction: '„Äå„ÅÇ„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàa„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyA'],
          displayKeys: ['a'],
          inputMode: 'hiragana',
          expectedResult: '„ÅÇ'
        },
        {
          instruction: '„Äå„Åã„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàk+a„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyK', 'KeyA'],
          displayKeys: ['k', 'a'],
          inputMode: 'hiragana',
          expectedResult: '„Åã'
        },
        {
          instruction: '„Äå„Åï„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàs+a„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyS', 'KeyA'],
          displayKeys: ['s', 'a'],
          inputMode: 'hiragana',
          expectedResult: '„Åï'
        },
        {
          instruction: '„Äå„Åü„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàt+a„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyT', 'KeyA'],
          displayKeys: ['t', 'a'],
          inputMode: 'hiragana',
          expectedResult: '„Åü'
        }
      ]
    },
    {
      id: 'hiragana-combination',
      title: '„Å≤„Çâ„Åå„Å™ÁµÑ„ÅøÂêà„Çè„Åõ',
      description: '„Çà„ÇäË§áÈõë„Å™„Å≤„Çâ„Åå„Å™„ÅÆÁµÑ„ÅøÂêà„Çè„Åõ„ÇíÁ∑¥Áøí',
      problems: [
        {
          instruction: '„Äå„Åç„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàk+i„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyK', 'KeyI'],
          displayKeys: ['k', 'i'],
          inputMode: 'hiragana',
          expectedResult: '„Åç'
        },
        {
          instruction: '„Äå„Åó„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàs+i„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyS', 'KeyI'],
          displayKeys: ['s', 'i'],
          inputMode: 'hiragana',
          expectedResult: '„Åó'
        },
        {
          instruction: '„Äå„Å°„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàt+i„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyT', 'KeyI'],
          displayKeys: ['t', 'i'],
          inputMode: 'hiragana',
          expectedResult: '„Å°'
        },
        {
          instruction: '„Äå„Çì„Äç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàn+n„Ç≠„Éº„ÇíÊäº„ÅôÔºâ',
          expectedKeys: ['KeyN', 'KeyN'],
          displayKeys: ['n', 'n'],
          inputMode: 'hiragana',
          expectedResult: '„Çì'
        }
      ]
    },
    {
      id: 'katakana-conversion',
      title: '„Ç´„Çø„Ç´„ÉäÂ§âÊèõÊäÄË°ì',
      description: 'F7„Ç≠„Éº„Çí‰Ωø„Å£„Åü„Ç´„Çø„Ç´„ÉäÂ§âÊèõ„ÅÆÁ∑¥Áøí',
      problems: [
        {
          instruction: '„Äå„ÅÇ„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F7„Åß„Ç´„Çø„Ç´„Éä„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyA', 'F7'],
          displayKeys: ['a', 'F7'],
          inputMode: 'hiragana',
          expectedResult: '„Ç¢'
        },
        {
          instruction: '„Äå„Åã„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F7„Åß„Ç´„Çø„Ç´„Éä„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyK', 'KeyA', 'F7'],
          displayKeys: ['k', 'a', 'F7'],
          inputMode: 'hiragana',
          expectedResult: '„Ç´'
        },
        {
          instruction: '„Äå„Åï„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F7„Åß„Ç´„Çø„Ç´„Éä„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyS', 'KeyA', 'F7'],
          displayKeys: ['s', 'a', 'F7'],
          inputMode: 'hiragana',
          expectedResult: '„Çµ'
        }
      ]
    },
    {
      id: 'function-keys-advanced',
      title: 'È´òÂ∫¶„Å™„Éï„Ç°„É≥„ÇØ„Ç∑„Éß„É≥„Ç≠„ÉºÊ¥ªÁî®',
      description: 'F8(ÂçäËßí„Ç´„Çø„Ç´„Éä)„ÄÅF10(ÂçäËßíËã±Êï∞)„ÅÆÂÆüË∑µÁöÑ„Å™‰Ωø„ÅÑÊñπ',
      problems: [
        {
          instruction: '„Äå„ÅÇ„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F8„ÅßÂçäËßí„Ç´„Çø„Ç´„Éä„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyA', 'F8'],
          displayKeys: ['a', 'F8'],
          inputMode: 'hiragana',
          expectedResult: 'ÔΩ±'
        },
        {
          instruction: '„Äå„Åã„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F8„ÅßÂçäËßí„Ç´„Çø„Ç´„Éä„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyK', 'KeyA', 'F8'],
          displayKeys: ['k', 'a', 'F8'],
          inputMode: 'hiragana',
          expectedResult: 'ÔΩ∂'
        },
        {
          instruction: '„Äå„ÅÇ„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F10„ÅßÂçäËßíËã±Êï∞„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyA', 'F10'],
          displayKeys: ['a', 'F10'],
          inputMode: 'hiragana',
          expectedResult: 'a'
        },
        {
          instruction: '„Äå„Åã„Äç„Å®ÂÖ•Âäõ„Åó„Å¶F10„ÅßÂçäËßíËã±Êï∞„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyK', 'KeyA', 'F10'],
          displayKeys: ['k', 'a', 'F10'],
          inputMode: 'hiragana',
          expectedResult: 'ka'
        }
      ]
    },
    {
      id: 'practical-application',
      title: 'ÂÆüË∑µÁöÑ„Å™ÊñáÂ≠óÂÖ•Âäõ',
      description: 'Êó•Â∏∏ÁöÑ„Å™ÊñáÂ≠óÂÖ•Âäõ„Ç∑„Éä„É™„Ç™„ÅÆÁ∑¥Áøí',
      problems: [
        {
          instruction: '„Äå„Åì„Çì„Å´„Å°„ÅØ„Äç„Å®ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyK', 'KeyO', 'KeyN', 'KeyN', 'KeyI', 'KeyT', 'KeyI', 'KeyH', 'KeyA'],
          displayKeys: ['k', 'o', 'n', 'n', 'i', 't', 'i', 'h', 'a'],
          inputMode: 'hiragana',
          expectedResult: '„Åì„Çì„Å´„Å°„ÅØ'
        },
        {
          instruction: '„Äå„ÅÇ„Çä„Åå„Å®„ÅÜ„Äç„Å®ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          expectedKeys: ['KeyA', 'KeyR', 'KeyI', 'KeyG', 'KeyA', 'KeyT', 'KeyO', 'KeyU'],
          displayKeys: ['a', 'r', 'i', 'g', 'a', 't', 'o', 'u'],
          inputMode: 'hiragana',
          expectedResult: '„ÅÇ„Çä„Åå„Å®„ÅÜ'
        },
        {
          instruction: '„Äå„Åì„Çì„Å´„Å°„ÅØ„Äç„Çí„Ç´„Çø„Ç´„Éä„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàF7‰ΩøÁî®Ôºâ',
          expectedKeys: ['KeyK', 'KeyO', 'KeyN', 'KeyN', 'KeyI', 'KeyT', 'KeyI', 'KeyH', 'KeyA', 'F7'],
          displayKeys: ['k', 'o', 'n', 'n', 'i', 't', 'i', 'h', 'a', 'F7'],
          inputMode: 'hiragana',
          expectedResult: '„Ç≥„É≥„Éã„ÉÅ„Éè'
        }
      ]
    }
  ];

  /* --------------------------------------------------
     2. Áä∂ÊÖãÁÆ°ÁêÜ
     --------------------------------------------------*/
  let currentCurriculum = 0;
  let currentProblem = 0;
  let currentKeyIndex = 0;
  let userInputSequence = [];
  let isActive = false;
  let inputBuffer = '';

  /* --------------------------------------------------
     3. UIË¶ÅÁ¥†„ÅÆÂèÇÁÖß
     --------------------------------------------------*/
  const elements = {
    lessonDisplay: document.getElementById('lesson-display'),
    practiceText: document.getElementById('practice-text'),
    typedDisplay: document.getElementById('typed-display'),
    inputField: document.getElementById('input-field'),
    keyboard: document.getElementById('keyboard'),
    retryMessage: document.getElementById('retry-message')
  };

  /* --------------------------------------------------
     4. „Ç≠„ÉºË°®Á§∫Áî®„ÅÆ„Ç¢„Ç§„Ç≥„É≥/ÁîªÂÉè„Éû„ÉÉ„Éó
     --------------------------------------------------*/
  const keyIconMap = {
    'Backquote': { type: 'image', src: 'images/hanzen.png', alt: 'Âçä/ÂÖ®' }, // Âçä/ÂÖ®„Ç≠„Éº„ÅÆ„Ç¢„Ç§„Ç≥„É≥
    'F7': 'üî§', // „Ç´„Çø„Ç´„ÉäÂ§âÊèõ
    'F8': 'üî°', // ÂçäËßí„Ç´„Çø„Ç´„Éä
    'F10': 'üî†', // ÂçäËßíËã±Êï∞
    'KanaMode': '„ÅÇ', // „Åã„Å™
    'Convert': 'Â§âÊèõ',
    'NonConvert': 'ÁÑ°Â§âÊèõ',
    'Enter': '‚èé', // Enter„Ç≠„Éº
    'Space': '‚ê£', // „Çπ„Éö„Éº„Çπ
    'Shift': '‚áß', // Shift
    'Ctrl': 'Ctrl',
    'Alt': 'Alt'
  };

  /* --------------------------------------------------
     5. ÂïèÈ°åË°®Á§∫Ê©üËÉΩ
     --------------------------------------------------*/
  function displayCurrentProblem() {
    const curriculum = learningCurriculum[currentCurriculum];
    const problem = curriculum.problems[currentProblem];
    
    if (!problem) return;

    // ÁâπÂà•„Å™„Ç≠„Éº„ÅÆÂà§ÂÆöÈñ¢Êï∞
    const isSpecialKey = (keyCode) => {
      return ['Backquote', 'F7', 'F8', 'F10', 'KanaMode', 'Convert', 'NonConvert'].includes(keyCode);
    };
    
    // ÊåáÁ§∫Êñá„ÇíË°®Á§∫
    elements.practiceText.innerHTML = `
      <div class="problem-instruction">${problem.instruction}</div>
      <div class="key-sequence">
        ${problem.displayKeys.map((key, index) => {
          const keyCode = problem.expectedKeys[index];
          const isSpecial = isSpecialKey(keyCode);
          const iconData = keyIconMap[keyCode];
          
          let displayContent;
          if (iconData && iconData.type === 'image') {
            console.log('Loading image:', iconData.src); // „Éá„Éê„ÉÉ„Ç∞Áî®
            displayContent = `<img src="${iconData.src}" alt="${iconData.alt}" class="key-icon" onerror="console.error('Image failed to load:', this.src)" onload="console.log('Image loaded successfully:', this.src)" />`;
          } else {
            displayContent = iconData || key;
          }
          
          return `
            <span class="key-display ${index === currentKeyIndex ? 'current' : ''} ${index < currentKeyIndex ? 'completed' : ''} ${isSpecial ? 'special-key' : ''}">
              ${displayContent}
            </span>
          `;
        }).join('')}
      </div>
    `;

    // ÁèæÂú®„ÅÆ„Ç≠„Éº„Çí„Éè„Ç§„É©„Ç§„Éà
    if (currentKeyIndex < problem.expectedKeys.length) {
      highlightKey(problem.expectedKeys[currentKeyIndex]);
    }
  }

  /* --------------------------------------------------
     6. ÂÖ•ÂäõÂà§ÂÆö„Å®„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
     --------------------------------------------------*/
  function checkInput(keyCode) {
    const curriculum = learningCurriculum[currentCurriculum];
    const problem = curriculum.problems[currentProblem];
    
    if (!problem || currentKeyIndex >= problem.expectedKeys.length) return;

    const expectedKey = problem.expectedKeys[currentKeyIndex];
    const isCorrect = keyCode === expectedKey;

    // ÈªíÂ∏Ø„Å´ÂÖ•ÂäõÂÜÖÂÆπ„ÇíË°®Á§∫Ôºà„É°„É¢Â∏≥È¢®Ôºâ
    appendToTypedDisplay(keyCode, isCorrect);

    // Ê≠£Ë™§Âà§ÂÆö„ÅÆË¶ñË¶ö„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
    showInputFeedback(isCorrect, currentKeyIndex);

    if (isCorrect) {
      currentKeyIndex++;
      userInputSequence.push(keyCode);

      // ÂïèÈ°åÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
      if (currentKeyIndex >= problem.expectedKeys.length) {
        setTimeout(() => {
          nextProblem();
        }, 1000);
      } else {
        // Ê¨°„ÅÆ„Ç≠„Éº„Çí„Éè„Ç§„É©„Ç§„Éà
        highlightKey(problem.expectedKeys[currentKeyIndex]);
      }
    } else {
      // ÈñìÈÅï„ÅÑ„ÅÆÂ†¥Âêà„ÄÅ„É™„Éà„É©„Ç§„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
      elements.retryMessage.hidden = false;
      setTimeout(() => {
        elements.retryMessage.hidden = true;
      }, 2000);
    }

    // „Ç≠„ÉºË°®Á§∫„ÇíÊõ¥Êñ∞
    updateKeySequenceDisplay();
  }

  /* --------------------------------------------------
     7. ÈªíÂ∏ØË°®Á§∫Ôºà„É°„É¢Â∏≥È¢®Ôºâ
     --------------------------------------------------*/
  function appendToTypedDisplay(keyCode, isCorrect) {
    const keyLabel = getKeyLabel(keyCode);
    const span = document.createElement('span');
    span.textContent = keyLabel;
    
    // Âü∫Êú¨„ÅÆÊ≠£Ë™§„ÇØ„É©„Çπ
    span.className = isCorrect ? 'correct-input' : 'incorrect-input';
    
    // ÁâπÂà•„Å™„Ç≠„Éº„ÅÆÂ†¥Âêà„ÅØËøΩÂä†„ÅÆ„ÇØ„É©„Çπ„Çí‰ªò‰∏é
    const isSpecial = ['Backquote', 'F7', 'F8', 'F10', 'KanaMode', 'Convert', 'NonConvert'].includes(keyCode);
    if (isSpecial) {
      span.classList.add('special-key-typed');
    }
    
    elements.typedDisplay.appendChild(span);
  }

  function getKeyLabel(keyCode) {
    // „Ç¢„Ç§„Ç≥„É≥„Éû„ÉÉ„Éó„Åã„Çâ„ÉÅ„Çß„ÉÉ„ÇØ
    const iconData = keyIconMap[keyCode];
    if (iconData && iconData.type === 'image') {
      return iconData.alt; // ÈªíÂ∏Ø„Åß„ÅØ„ÉÜ„Ç≠„Çπ„Éà„ÅßË°®Á§∫
    }
    
    const labelMap = {
      'Backquote': 'Âçä/ÂÖ®',
      'KanaMode': '„Åã„Å™',
      'F7': 'F7',
      'F8': 'F8',
      'F10': 'F10',
      'KeyA': 'a', 'KeyB': 'b', 'KeyC': 'c', 'KeyD': 'd', 'KeyE': 'e',
      'KeyF': 'f', 'KeyG': 'g', 'KeyH': 'h', 'KeyI': 'i', 'KeyJ': 'j',
      'KeyK': 'k', 'KeyL': 'l', 'KeyM': 'm', 'KeyN': 'n', 'KeyO': 'o',
      'KeyP': 'p', 'KeyQ': 'q', 'KeyR': 'r', 'KeyS': 's', 'KeyT': 't',
      'KeyU': 'u', 'KeyV': 'v', 'KeyW': 'w', 'KeyX': 'x', 'KeyY': 'y', 'KeyZ': 'z',
      'Digit0': '0', 'Digit1': '1', 'Digit2': '2', 'Digit3': '3', 'Digit4': '4',
      'Digit5': '5', 'Digit6': '6', 'Digit7': '7', 'Digit8': '8', 'Digit9': '9',
      'Space': '„Çπ„Éö„Éº„Çπ',
      'Enter': 'Enter',
      'Shift': 'Shift',
      'Convert': 'Â§âÊèõ',
      'NonConvert': 'ÁÑ°Â§âÊèõ'
    };
    return labelMap[keyCode] || keyCode;
  }

  /* --------------------------------------------------
     8. Ê≠£Ë™§Âà§ÂÆö„ÅÆË¶ñË¶ö„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºà„É¨„Ç§„É§„ÉºÊñπÂºèÔºâ
     --------------------------------------------------*/
  function showInputFeedback(isCorrect, keyIndex) {
    const keyDisplays = document.querySelectorAll('.key-display');
    if (keyDisplays[keyIndex]) {
      const feedback = document.createElement('div');
      feedback.className = `feedback-overlay ${isCorrect ? 'correct' : 'incorrect'}`;
      feedback.textContent = isCorrect ? '‚óã' : '√ó';
      
      keyDisplays[keyIndex].style.position = 'relative';
      keyDisplays[keyIndex].appendChild(feedback);
      
      setTimeout(() => {
        feedback.remove();
      }, 1500);
    }
  }

  /* --------------------------------------------------
     9. „Ç≠„Éº„Ç∑„Éº„Ç±„É≥„ÇπË°®Á§∫„ÅÆÊõ¥Êñ∞
     --------------------------------------------------*/
  function updateKeySequenceDisplay() {
    const curriculum = learningCurriculum[currentCurriculum];
    const problem = curriculum.problems[currentProblem];
    
    if (!problem) return;

    const keyDisplays = document.querySelectorAll('.key-display');
    keyDisplays.forEach((display, index) => {
      display.className = 'key-display';
      if (index < currentKeyIndex) {
        display.classList.add('completed');
      } else if (index === currentKeyIndex) {
        display.classList.add('current');
      }
    });
  }

  /* --------------------------------------------------
     10. „Ç≠„Éº„Éú„Éº„Éâ„Éè„Ç§„É©„Ç§„Éà
     --------------------------------------------------*/
  
  // „Ç≠„Éº„Ç≥„Éº„Éâ„Åã„ÇâÊñáÂ≠ó„Å∏„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
  const keyCodeToChar = {
    'KeyA': 'a', 'KeyB': 'b', 'KeyC': 'c', 'KeyD': 'd', 'KeyE': 'e',
    'KeyF': 'f', 'KeyG': 'g', 'KeyH': 'h', 'KeyI': 'i', 'KeyJ': 'j',
    'KeyK': 'k', 'KeyL': 'l', 'KeyM': 'm', 'KeyN': 'n', 'KeyO': 'o',
    'KeyP': 'p', 'KeyQ': 'q', 'KeyR': 'r', 'KeyS': 's', 'KeyT': 't',
    'KeyU': 'u', 'KeyV': 'v', 'KeyW': 'w', 'KeyX': 'x', 'KeyY': 'y', 'KeyZ': 'z',
    'Digit1': '1', 'Digit2': '2', 'Digit3': '3', 'Digit4': '4', 'Digit5': '5',
    'Digit6': '6', 'Digit7': '7', 'Digit8': '8', 'Digit9': '9', 'Digit0': '0',
    'Space': ' ', 'Backquote': '¬•'
  };
  
  // Êåá„ÅÆËâ≤„Éû„ÉÉ„Éó
  const fingerColors = {
    'left-pinky': '#ff0000',
    'left-ring': '#ffa500', 
    'left-middle': '#ffd800',
    'left-index': '#00c000',
    'right-index': '#00d8d8',
    'right-middle': '#0040ff',
    'right-ring': '#8000ff',
    'right-pinky': '#ff80b2',
    'thumb': '#808080'
  };
  
  function highlightKey(keyCode) {
    // Êó¢Â≠ò„ÅÆ„Éè„Ç§„É©„Ç§„Éà„Çí„ÇØ„É™„Ç¢
    document.querySelectorAll('.key').forEach(key => {
      key.classList.remove('next-key');
      key.style.removeProperty('border-color');
      key.style.removeProperty('box-shadow');
      key.style.removeProperty('background-color');
    });

    // ÂØæË±°„Ç≠„Éº„Çí„Éè„Ç§„É©„Ç§„Éà
    const targetKey = document.querySelector(`[data-code="${keyCode}"]`);
    if (targetKey) {
      // „Ç≠„Éº„Ç≥„Éº„Éâ„Åã„ÇâÊñáÂ≠ó„ÇíÂèñÂæó
      const char = keyCodeToChar[keyCode];
      let fingerType = null;
      
      // Êåá„ÅÆÁ®ÆÈ°û„ÇíÂèñÂæó
      if (char && window.getFingerForKey) {
        fingerType = window.getFingerForKey(char);
      }
      
      // Êåá„ÅÆËâ≤„ÇíÂèñÂæó
      const fingerColor = fingerType ? fingerColors[fingerType] : '#2196f3';
      
      // „Éè„Ç§„É©„Ç§„Éà„ÇíÈÅ©Áî®
      targetKey.classList.add('next-key');
      targetKey.style.borderColor = fingerColor;
      targetKey.style.boxShadow = `0 0 12px 3px ${fingerColor}66`;
      targetKey.style.backgroundColor = `${fingerColor}1a`;
    }
  }

  /* --------------------------------------------------
     11. ÂïèÈ°åÈÄ≤Ë°åÂà∂Âæ°
     --------------------------------------------------*/
  function nextProblem() {
    currentProblem++;
    currentKeyIndex = 0;
    userInputSequence = [];
    elements.typedDisplay.innerHTML = ''; // ÈªíÂ∏Ø„Çí„ÇØ„É™„Ç¢

    const curriculum = learningCurriculum[currentCurriculum];
    
    if (currentProblem >= curriculum.problems.length) {
      // „Ç´„É™„Ç≠„É•„É©„É†ÂÆå‰∫Ü
      nextCurriculum();
    } else {
      // Ê¨°„ÅÆÂïèÈ°å„ÇíË°®Á§∫
      displayCurrentProblem();
    }
    updateProgress();
  }

  function nextCurriculum() {
    currentCurriculum++;
    currentProblem = 0;
    currentKeyIndex = 0;
    userInputSequence = [];
    elements.typedDisplay.innerHTML = ''; // ÈªíÂ∏Ø„Çí„ÇØ„É™„Ç¢

    if (currentCurriculum >= learningCurriculum.length) {
      // ÂÖ®„Ç´„É™„Ç≠„É•„É©„É†ÂÆå‰∫Ü
      showCompletionMessage();
    } else {
      displayCurrentProblem();
    }
    updateProgress();
  }

  function showCompletionMessage() {
    elements.practiceText.innerHTML = `
      <div class="completion-message">
        <h2>üéâ „Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ</h2>
        <p>„Åô„Åπ„Å¶„ÅÆ„É¨„ÉÉ„Çπ„É≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ</p>
        <button onclick="window.mode3ProblemEngine.restart()">ÊúÄÂàù„Åã„ÇâÂßã„ÇÅ„Çã</button>
      </div>
    `;
  }

  /* --------------------------------------------------
     12. „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
     --------------------------------------------------*/
  function handleKeyDown(event) {
    if (!isActive) return;
    
    event.preventDefault();
    checkInput(event.code);
  }

  /* --------------------------------------------------
     13. ÈÄ≤ÊçóÁÆ°ÁêÜ
     --------------------------------------------------*/
  function getProgress() {
    const totalProblems = learningCurriculum.reduce((sum, curriculum) => sum + curriculum.problems.length, 0);
    const completedProblems = learningCurriculum.slice(0, currentCurriculum).reduce((sum, curriculum) => sum + curriculum.problems.length, 0) + currentProblem;
    const percentage = Math.round((completedProblems / totalProblems) * 100);
    
    return {
      title: learningCurriculum[currentCurriculum]?.title || '',
      percentage: percentage,
      currentCurriculum: currentCurriculum + 1,
      totalCurricula: learningCurriculum.length,
      currentProblem: currentProblem + 1,
      totalProblems: learningCurriculum[currentCurriculum]?.problems.length || 0
    };
  }

  function updateProgress() {
    if (window.updateProgressDisplay) {
      window.updateProgressDisplay();
    }
  }

  /* --------------------------------------------------
     14. ÂÖ¨ÈñãAPI
     --------------------------------------------------*/
  window.mode3ProblemEngine = {
    start() {
      isActive = true;
      currentCurriculum = 0;
      currentProblem = 0;
      currentKeyIndex = 0;
      userInputSequence = [];
      elements.typedDisplay.innerHTML = '';
      displayCurrentProblem();
      updateProgress();
      
      // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
      document.addEventListener('keydown', handleKeyDown);
    },

    stop() {
      isActive = false;
      document.removeEventListener('keydown', handleKeyDown);
    },

    restart() {
      this.stop();
      this.start();
    },

    reset() {
      this.stop();
      elements.practiceText.innerHTML = '';
      elements.typedDisplay.innerHTML = '';
      document.querySelectorAll('.key').forEach(key => {
        key.classList.remove('next-key');
      });
    },

    skip() {
      if (isActive) {
        nextProblem();
        updateProgress();
      }
    },

    getProgress() {
      return getProgress();
    }
  };

  /* --------------------------------------------------
     14. ÂàùÊúüÂåñ
     --------------------------------------------------*/
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Mode3 Problem Engine loaded');
  });

})();
